//sending an item securely using a 2 phase commit, writing in candidate diagram language about nested heirachical state machines
{
  "rules": {
	".read": true, //grant read access to all
    "users": {
      "$user":{
        ".variables":{
            "item":{},
            "tx_loc":{},
            "tx":{},
            "rx_loc":{},
            "rx":{}
        },".states":{
            "IDLE":{},
            "TX":{},
            "RX":{},
            "ACK_TX":{},
            "ACK_RX":{}
        },".transition_types":{
            "self":"$user == auth.username",
            "other":"auth.username == data.child('rx_loc').val() || auth.username == data.child('tx_loc').val()",
            "either":"$user == auth.username || auth.username == data.child('rx_loc').val() || auth.username == data.child('tx_loc').val()"
        },".transitions":{
            "INITIALIZE":{"from":"null", "to":"IDLE", type:"self",
                    "effect":"
                        newData.child('item').val() == null &&
                        newData.child('tx').val() == null &&
                        newData.child('tx_loc').val() == null &&
                        newData.child('rx').val() == null &&
                        newData.child('rx_loc').val()  == null"
            },"SEND":{"from":"IDLE", "to":"TX", type:"self",
                "guard":"
                    data.child('item').exists() &&
                    root.child('users').child(newData.child('tx_loc').val()).exists()",
                "effect":"
                    newData.child('tx').val() == data.child('item').val() &&
                    newData.child('tx_loc').val() != null"
            },"RECEIVE":{"from":"IDLE", "to":"RX", type:"self",
                "guard":"
                    !data.child('item').exists() &&
                    $user == root.child('users').child(newData.child('rx_loc').val()).child('tx_loc').val()",
                "effect":"
                    newData.child('rx').val() == root.child('users').child(newData.child('rx_loc').val()).child('tx').val() &&
                    newData.child('rx_loc').val() != null"
            },"ACK_RX":{"from":"RX", "to":"ACK_RX", type:"other"
            },"ACK_TX":{"from":"TX", "to":"ACK_TX", type:"other",
                "guard":"
                    root.child('users').child(newData.child('tx_loc').val()).child('state').val() == 'ACK_RX'"
            },"COMMIT_TX":{"from":"ACK_TX", "to":"IDLE", type:"either",
                "guard":"
                    root.child('users').child(data.child('tx_loc').val()).child('state').val() == 'ACK_RX'",
                "effect":"
                    newData.child('item').val() == null &&
                    newData.child('tx_loc').val() == null &&
                    newData.child('tx').val() == null"
            },"COMMIT_RX":{"from":"ACK_RX", "to":"IDLE", type:"either",
                "guard":"
                    root.child('users').child(data.child('rx_loc').val()).child('state').val() != 'TX' &&
                    root.child('users').child(data.child('rx_loc').val()).child('state').val() != 'ACK_TX'",
                "effect":"
                    newData.child('item').val() == data.child('rx').val()&&
                    newData.child('rx_loc').val() == null &&
                    newData.child('rx').val() == null"
            }
        }
      }
    }
  }
}