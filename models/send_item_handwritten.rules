//The ability to not to clamp null values means the user can write extra data during transitions (padding). Dangerous. The system definately needs to know what variables are under control
//"It's not a bug. Validate rules are only run for non-empty data new data." Andrew Lee (Firebase Developer) https://groups.google.com/forum/#!topic/firebase-talk/TbCK_zHyghg
{
  "rules": {
	".read": true, //grant read access to all
    "users": {
      "$user":{
		//if new data is empty then validation rules don't run which is a cause of problems
		//all rules pushed into .write (found in testing)
		".write":"
			//initial condition, start in IDLE state
			(!data.child('state').exists() && 
				$user == auth.username && 
				newData.child('state').val() =='IDLE' &&

				newData.child('item').val() == null && //by default, newData.child('item').val() == data.child('item').val() probably acheives the same thing and easier to machine generate
				newData.child('tx_loc').val() == null &&
				newData.child('tx').val() == null &&
				newData.child('rx_loc').val() == null &&
				newData.child('rx').val() == null
				) ||
			//IDLE -> TX (SEND)
			($user == auth.username &&
				data.child('state').val() =='IDLE' &&
				data.child('item').exists() &&

				newData.child('state').val() =='TX' &&
				root.child('users').child(newData.child('tx_loc').val()).exists() && //we have to send to someone
				newData.child('tx').val() == data.child('item').val() &&
				newData.child('item').val() == null && //padding avoidance
				newData.child('rx_loc').val() == null &&
				newData.child('rx').val() == null
				) ||
			//IDLE -> RX (RECIEVE)
			($user == auth.username &&
				data.child('state').val() =='IDLE' &&
				!data.child('item').exists() &&

				newData.child('state').val() =='RX' &&
				$user == root.child('users').child(newData.child('rx_loc').val()).child('tx_loc').val() && //we have to recieve from someone who is sending to us
				newData.child('rx').val() == root.child('users').child(newData.child('rx_loc').val()).child('tx').val() && //what we receive matches what was sent

				newData.child('item').val() == null && //padding avoidance
                newData.child('tx_loc').val() == null &&
                newData.child('tx').val() == null
				) ||
			//RX -> ACK_RX NOTE: done by sender to indicate they have seen the RX transition
            (auth.username == data.child('rx_loc').val() &&
                data.child('state').val() =='RX' &&

                newData.child('state').val() =='ACK_RX' &&

                newData.child('rx_loc').val() == data.child('rx_loc').val() &&
                newData.child('rx').val() == data.child('rx').val() &&
                newData.child('item').val() == null &&
                newData.child('tx_loc').val() == null &&
                newData.child('tx').val() == null
                ) ||
            //TX -> ACK_TX NOTE: done by receiver to indicate they have seen the TX transition
            (auth.username == data.child('tx_loc').val() &&
                data.child('state').val() =='TX' &&

                //check ACK_RX is present
                root.child('users').child(newData.child('tx_loc').val()).child('state').val() == 'ACK_RX' && //tricky one to spot, found in out of order testing
                newData.child('state').val() =='ACK_TX' &&

                newData.child('tx_loc').val() == data.child('tx_loc').val() &&
                newData.child('tx').val() == data.child('tx').val() &&
                newData.child('item').val() == null &&
                newData.child('rx_loc').val() == null &&
                newData.child('rx').val() == null
                ) ||
            //ACK_TX -> IDLE, COMMIT_TX, EITHER party can finalize the transaction thus avoiding deadlocks
            (($user == auth.username || auth.username == data.child('tx_loc').val()) &&
                data.child('state').val() =='ACK_TX' &&
                newData.child('state').val() =='IDLE' &&

                newData.child('item').val() == null &&
                newData.child('tx_loc').val() == null &&
                newData.child('tx').val() == null &&
                newData.child('rx_loc').val() == null &&
                newData.child('rx').val() == null
                ) ||
            //ACK_RX -> IDLE, COMMIT_RX, EITHER party can finalize the transaction thus avoiding deadlocks
            (($user == auth.username || auth.username == data.child('rx_loc').val())&&
                data.child('state').val() =='ACK_RX' &&

                //check ACK_TX is no longer present (although they could have stated another trade...)
                root.child('users').child(data.child('rx_loc').val()).child('state').val() != 'TX' &&
                root.child('users').child(data.child('rx_loc').val()).child('state').val() != 'ACK_TX' &&

                newData.child('state').val() =='IDLE' &&
                newData.child('item').val() == data.child('rx').val() && //add item to inventory

                newData.child('tx_loc').val() == null &&
                newData.child('tx').val() == null &&
                newData.child('rx_loc').val() == null &&
                newData.child('rx').val() == null
                )
		",
      }
    }
  }
}


