/* PEG.js grammar
 * Representation of hierarchical state machines for generating validation rules
 *
 * special syntax is ".states", ".transitions", ".transition_types", ".variables"
 * we do not process ".write" if a machine is defined
 * you are free to add read and validate where you like
 */

block
  = _ "{" _  bk1:block_item? _ bk2:("," _ block_item _?)*  "}" _
{
    var val = {};
    if (bk1.key != null){
        val[bk1.key] = bk1.val;
    }
    if (bk2 != null){
        for (var i =0;i<bk2.length; i++){
            val[bk2[i][2].key] = bk2[i][2].val;
        }
    }
    //console.log("\nval", val);
    return {"!type":"OBJ", val:val};
}
  / lit:literal { return lit; }

block_item
  = key:identifier _ ":" _ val:block { return {key:key, val:val}; }

identifier
  = "\"" prefix:("$"/"."/"")characters:[A-z0-9]+ "\""  { return prefix+characters.join(""); }
  /      prefix:("$"/"."/"")characters:[A-z0-9]+       { return prefix+characters.join(""); }

literal
  = "true"    {return {"!type":"BOOL", val:true}; }
  / "false"   {return {"!type":"BOOL", val:false};}
  / "\"" characters:[^\"]* "\""  {var obj = {"!type":"STR", val:characters.join("")}; if(obj.val === "null") obj.val = null; return obj;}
  / "\'" characters:[^\']* "\'"  {var obj = {"!type":"STR", val:characters.join("")}; if(obj.val === "null") obj.val = null; return obj;}

_ //a comment, or unexpected new line
  = ("\t" / " " / "\n")* { return "";}
