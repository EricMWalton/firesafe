/* PEG.js grammar
 * Representation of hierarchical state machines for generating validation rules
 */

block
  = _ "{" _  bk1:block_item? _ bk2:("," _ block_item _?)*  "}" _
{
   result = {};
   if (bk1 != undefined){
       result[bk1.key] = bk1.val;
   }
   for (var i =0;i<bk2.length; i++){
       result[bk2[i][2].key] = bk2[i][2].val;
   }
   return result;
}
  / lit:literal { return lit; }

block_item
  = key:identifier _ ":" _ val:block { return {key:key, val:val}; }

identifier
  = "\"" prefix:("$"/"."/"")characters:[A-z]+ "\""  { return prefix+characters.join(""); }
  /      prefix:("$"/"."/"")characters:[A-z]+       { return prefix+characters.join(""); }

literal
  = "true"    { return true; }
  / "false"   { return false; }
  / "\"" characters:[^\"]* "\""  { return characters.join(""); }
  / "\'" characters:[^\']* "\'"  { return characters.join(""); }

_ //a comment, or unexpected new line
  = ("\t" / " " / "\n")* { return "";}
